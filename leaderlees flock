<html>
<head>
  <title></title>
</head>
<body>

<p id="demo"></p>


<canvas id="myCanvas" width="600" height="600"
style="border:1px solid #c3c3c3;">
Your browser does not support the canvas element.
</canvas>
 <script>
var canvas = document.getElementById("myCanvas");
var ctx = canvas.getContext("2d");
var rows=20
var cols=20
var radius=5
var len=600;//area
var heig=600;//area
var MaxDist=Math.sqrt(Math.pow(len,2)+Math.pow(heig,2))//max distance
var heading=0;
var nmbOfBirds=10
var Birdpos
var BirdHeading=[]
var BirdPersistant=[]
var persDistance
var socialDistance
var gravityOfBird=0.5
var Helpfield
var field
var percieve=[]
var birdView=170
var dstsfctn=[]
var ts=1
var tp=1
var tm=1
var k=0.5
var cImage=new Image()
var weightb=[]


function initHelpField()
{
Helpfield=new Array(nmbOfBirds)

for ( var i=0;i<nmbOfBirds;i++)
{
Helpfield[i]=[];
}//end i
for ( var i=0;i<nmbOfBirds;i++)
{
    for(var j=0;j<2;j++)
	{
	Helpfield[i][j]=0;
	}//end j
}//end i

}//end initField

function randi(rng,bgn)
{
return Math.floor(Math.random()*rng)+bgn
}//rand


function initBirdIdealDistance()
{
Birdpos=new Array(nmbOfBirds)

for ( var i=0;i<nmbOfBirds;i++)
{
Birdpos[i]=[]
}
for ( var i=0;i<nmbOfBirds;i++)
{
   for ( var j=0;j<nmbOfBirds;j++){
      // Birdpos.push(Math.floor(Math.random()*280)+20)
	   Birdpos[i][j]=randi(1,3)
}// j  
}//i
}//end initBirdPos()

<!-- function initBirdHeading() -->
<!-- { -->
<!-- for(i=0;i<10;i++) -->
<!-- { -->
 

<!-- BirdHeading.push( randi(90,0)) -->
<!-- //document.getElementById("demo").innerHTML = randi() -->


<!-- }//i -->
<!-- }//initBirdHeading() -->

function initBirdSocialDist()
{
socialDistance=new Array(nmbOfBirds)

for ( var i=0;i<nmbOfBirds;i++)
{
socialDistance[i]=[]
}
for ( var i=0;i<nmbOfBirds;i++)
{
   for ( var j=0;j<nmbOfBirds;j++){
      // Birdpos.push(Math.floor(Math.random()*280)+20)
	   socialDistance[i][j]=randi(3,4)
}// j  
}//i
}//initBirdSocialDistance()


function initBirdPersonalDist()
{
persDistance=new Array(nmbOfBirds)

for ( var i=0;i<nmbOfBirds;i++)
{
persDistance[i]=[]
}
for ( var i=0;i<nmbOfBirds;i++)
{
   for ( var j=0;j<nmbOfBirds;j++){
      // Birdpos.push(Math.floor(Math.random()*280)+20)
	 persDistance[i][j]=randi(1,2)
}// j  
}//i
}//initBirdHeading()
function initField()
{
field=new Array(rows)

for ( var i=0;i<cols;i++)
{
field[i]=[];
}//end i
for ( var i=0;i<cols;i++)
{
    for(var j=0;j<rows;j++)
	{
	field[i][j]=0;
	}//end j
}//end i

}//end initField

<!-- function initBirds() -->
<!-- { -->

<!-- var x=randi(20,0) -->
<!-- var y=randi(20,0) -->
<!-- for(var i=0;i<nmbOfBirds;i++) -->
<!-- { -->


<!-- while(field[x][y]!=0) -->
<!-- { -->
<!-- x=randi(cols-2,2) -->
<!-- y=randi(cols-2,2) -->
<!-- } -->
<!-- field[x][y]=i+1 -->

<!-- }//i -->
<!-- Helpfield[i][0]=x; -->
<!-- Helpfield[i][1]=y; -->
<!-- }//end init Birds -->

 function initBirds() 
 {
 field[2][4]=1
 field[4][9]=2
 field[6][6]=3
 field[9][6]=4
 field[9][12]=5
 field[12][2]=6
 field[7][16]=7
 field[12][11]=8
 field[15][8]=9
 field[6][11]=10
 
 Helpfield[0][0]=2
 Helpfield[0][1]=4
 Helpfield[1][0]=4
 Helpfield[1][1]=9
 Helpfield[2][0]=6
 Helpfield[2][1]=6
 Helpfield[3][0]=9
 Helpfield[3][1]=6
 Helpfield[4][0]=9
 Helpfield[4][1]=12
 Helpfield[5][0]=12
 Helpfield[5][1]=2
 Helpfield[6][0]=7
 Helpfield[6][1]=16
 Helpfield[7][0]=12
 Helpfield[7][1]=11
 Helpfield[8][0]=15
 Helpfield[8][1]=8
 Helpfield[9][0]=6
 Helpfield[9][1]=11
 

 
 }//end init bird
 function initBirdHeading()
 {
  BirdHeading[0]=90
  BirdHeading[1]=45
  BirdHeading[2]=0
  BirdHeading[3]=0
  BirdHeading[4]=-45
  BirdHeading[5]=-90
  BirdHeading[6]=-45
  BirdHeading[7]=180
  BirdHeading[8]=-90
  BirdHeading[9]=-90

  weightb[0]=0.5
  weightb[1]=0.5
  weightb[2]=0.5
  weightb[3]=0.5
  weightb[4]=0.5
  weightb[5]=0.5
  weightb[6]=0.5
  weightb[7]=0.5
  weightb[8]=0.5
  weightb[9]=0.5
  









 
 }//end bird heading

function copyArray()
{
field1=field.slice()
} 
 


function ifPercive(i)
{

BirdPersistant=[]


//x=Math.cos((BirdHeading[i]*Math.PI)/180)
//y=Math.sin((BirdHeading[i]*Math.PI)/180)
x=Math.cos((BirdHeading[i]))
y=Math.sin((BirdHeading[i]))
vecMag=vectorMagnitude(x,y)
newX=x/vecMag
newY=y/vecMag
for(var c=0;c<nmbOfBirds;c++)
{
if(i==c)
{
BirdPersistant[c]=-1
}//if the same bird
else
{
difx=(Helpfield[c][0]-Helpfield[i][0])
dify=(Helpfield[c][1]-Helpfield[i][1])
magn=vectorMagnitude(difx,dify)
normx=difx/magn
normy=dify/magn
alpha=((Math.acos(newX*normx+newY*normy))*180)/Math.PI
if(alpha<=birdView)
{
//console.log(alpha)
BirdPersistant[c]=1

}
else
{
//console.log(alpha)

BirdPersistant[c]=0

}//else
}//else different bird
}
}//end persiving

function vectorMagnitude(x,y)
{
 return Math.sqrt(x*x+y*y)
}

function drawBoard(){
        // Box width
var bw = len;
// Box height
var bh = heig;
// Padding
var p = 0;
ctx.clearRect(0,0,600,600)
    for (var x = 0; x <= bw; x += 30) {
         ctx.moveTo( x , p);
         ctx.lineTo( x , bh );
    }

    for (var x = 0; x <= bh; x += 30) {
         ctx.moveTo(p,  x + p);
         ctx.lineTo(bw + p, x + p);
    }
     ctx.strokeStyle = "black";
     ctx.stroke();
}

function iniImage()
{
var cImage=new Image()

cImage.id="1"
cImage.src="arrawPegeonsSmall.png"
ctx.clearRect(0, 0, 600, 600);

cImage.onload=function(){



//ctx.drawImage(cImage,30,30,20,21)

 //cImage.style.transform="rotate("+ 180 +"deg)"
  bnumber=0
  
  

 for(i=0;i<20;i++) 
 {  
 
   

 
 
  for(j=0;j<20;j++){
	if(field[i][j]>0) 
{   
ctx.fillText(field[i][j],i*30,j*30)
	 // ctx.drawImage(cImage,i*30,j*30,20,21)
	  ctx.save();
    // perform transformation
    ctx.translate(i*30,j*30);
   ctx.rotate(-(BirdHeading[field[i][j]-1]* Math.PI )/ 180);
    //ctx.rotate(-0* Math.PI / 180)
    ctx.drawImage(cImage, 0, 0, 5, 20);
    // restore original canvas state (without rotation etc)
    ctx.restore(); 
 
  <!-- // console.log("bnumber") -->
  // console.log(bnumber)
 //console.log(BirdHeading[field[i][j]-1])
	 bnumber++
	  
	}//if 
	else
	{
	
	}

}// j  
 
}//i 
}
	  
}//iniImage()

function calculateNewPosition()
{
allUs=0
U=0
t=0

//for(t=0;t<40;t++)
//{
setInterval(function() {

//for(i=0;i<nmbOfBirds;i++)
for(i=0;i<nmbOfBirds;i++)
{


//for all agent i 
//find birds it persievs
ifPercive(i)
minx=0
miny=0
minDiss=1
mini=0
for(x=-1;x<2;x++)
  {
     
    for(y=-1;y<2;y++)
	{
	
	 //console.log(x,y)

	
 c=Helpfield[i][0]+x
  d=Helpfield[i][1]+y
  if(c==-1||d==-1||c==20||d==20)
  field[c][d]==-1
  //console.log('field',c,d)
  if(field[c][d]!==0||(c==-1||d==-1))
  {
    

  continue;

  }
  
        //console.log('field',field[c][d])
   //console.log(i+1,field[c][d])

  w= weigtofbird(c,d,i)
 // console.log(w)
 

 
 
  if(minDiss > w)
  {
  minDiss=w
   //console.log('Mindis '+ minDiss)
  minx=x
  miny=y
  mini=i
  }//find minimum  dissatisphaction
  
  //console.log("Position")
 //console.log(w)
 
   }//end for y
  }//for x

  a=Helpfield[i][0]
  b=Helpfield[i][1]
 // a=a+minx
 // b=b+miny
  field[a][b]=0
  
 //field[v][z]=0
  Helpfield[i][0]=Helpfield[i][0]+minx
 Helpfield[i][1]=Helpfield[i][1]+miny
 
 v=Helpfield[i][0]
 z=Helpfield[i][1]
 field[v][z]=mini+1
//console.log(i+1,field[v][z])
if(minx!=0)
 {
  heading=((Math.atan( miny/(minx)))* 180)/Math.PI
  BirdHeading[i]=heading
  //console.log(heading)
 }
 else if(minx==0&&miny<=0)
 {
   BirdHeading[i]=90

 }
 else if(minx==0&&miny>0)
 {
    BirdHeading[i]=270

 }
 
//drawBoard()
//iniImage()//
//drawBoard()
//console.log('summary ' + mini, field[a][b],minDiss,a,b + " vz " + v,z)
//console.log(BirdHeading[i])
refreshidealdistane(i,t)
iniImage()
console.log(t)



//  field[v][z]=0
 //console.log(v,z)
}//end birds
console.log('---------')
//}//end time
t++
}, 100000/90)
}//end of  calculate position


function weigtofbird(x,y,i)
{
dsfofeachplace=0
allweight=0
//console.log(BirdPersistant)
for(var b=0;b<nmbOfBirds;b++)
{
if(BirdPersistant[b]==1)
{
a=Helpfield[b][0]-x
d=Helpfield[b][1]-y
vecMag=vectorMagnitude(a,d)
birdweight=Math.pow( weightb[b],((vecMag)/MaxDist))
console.log('weight ' + weightb[b],b)
dsfofeachplace+=birdweight*(Math.abs(vecMag-Birdpos[i][b]))

allweight+=birdweight
//console.log(dsfofeachplace/(allweight*MaxDist))


}//end if persist
}//end b
//console.log(dsfofeachplace/(allweight*MaxDist))
//console.log("Check In")
//console.log(dsfofeachplace,allweight)
return dsfofeachplace/(allweight*MaxDist)
}//end weigtofbird

function refreshidealdistane(i,t)
{
for(i=0;i<nmbOfBirds;i++)
{

//for all agent i 
//find birds it persievs
ifPercive(i)
for(var b=0;b<nmbOfBirds;b++)
{
if(BirdPersistant[b]==1)
{
a=Helpfield[b][0]-Helpfield[i][0]
d=Helpfield[b][1]-Helpfield[i][0]
vecMag=vectorMagnitude(a,d)
if (vecMag<=socialDistance[i][b] && vecMag>persDistance[i][b]) 
{
 
 Birdpos[i][b]=vecMag
if(t%2==0)
{
socialDistance[i][b] - (k*Math.pow(t,2))/ts
persDistance[i][b] -(k*Math.pow(t,2))/ts
}//2t
else
{
socialDistance[i][b] +(k*t)/ts
persDistance[i][b]+(k*t)/ts
}//else

Birdpos[i][b]=persDistance[i][b]


ts++
}//trigger


else if  (vecMag>socialDistance[i][b])
{
if(t%2==0)
{
socialDistance[i][b] + (k*Math.pow(t,2))/tm
}//2t
else
{
socialDistance[i][b] -(k*t)/tm
}//else

Birdpos[i][b]=persDistance[i][b]
}//else if -->
else  
 { 

 
Birdpos[i][b]=persDistance[i][b] 
if(t%2==0)
{
console.log(t)
persDistance[i][b] -(k*Math.pow(t,2))/tp
}//2t
else
{
persDistance[i][b] +(k*t)/tp
}//else
 tp++
}//less than personal distance --> -->
}//if
}//b
} //i
}





initBirdHeading()//init heading of birds
initBirdSocialDist() //social distance in begining
initBirdPersonalDist() //personal distance in begining


//console.log( BirdHeading);
//console.log( socialDistance);
//console.log( persDistance);
 
initField()//field 20x20 with zeros
initHelpField()//array of inital location

//console.log(Birdpos)
initBirds()//birds location
//ifPercive(2)
//console.log("Bird Persistant")
initBirdIdealDistance()
initBirdPersonalDist()
initBirdSocialDist()
//iniImage()// first birds images
 // setInterval(iniImage,30);
calculateNewPosition()

//console.log(BirdPersistant)
//console.table([[field]])
//console.table([[Birdpos]])

</script>
</body>
</html>
